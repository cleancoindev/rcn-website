import lazypipe from 'lazypipe';
import prettify from 'gulp-jsbeautifier';
import replace from 'gulp-html-replace';
import name from 'gulp-rename';
import groupCssMediaQueries from 'gulp-group-css-media-queries';
import cleanCSS from 'gulp-clean-css';
import compiler from 'gulp-pug';
import purgecss from 'gulp-purgecss';
import moduleImporter from 'sass-module-importer';
import sass from 'gulp-sass';
import postCss from 'gulp-postcss';
import concat from 'gulp-concat';
import sourcemaps from 'gulp-sourcemaps';
import autoprefixer from 'autoprefixer';

const html = ({
  htmlReplace
}) => {
  return lazypipe()
    .pipe(replace, htmlReplace)
    .pipe(prettify)
};

const minifyStyles = rename => {
  const renameDefaults = { suffix: ".min" };
  const renameConfig = Object.assign({}, renameDefaults, rename);
  return lazypipe()
    .pipe(name, renameConfig)
    .pipe(groupCssMediaQueries)
    .pipe(cleanCSS)
};

const pug = ({
  pug
}) => {
  return lazypipe()
    .pipe(compiler, pug)
    .pipe(prettify)
};

const purge = ({ content }) => {
  return lazypipe().pipe(purgecss, content);
};

const styles = ({
  name = "main.css",
  production = false,
  postCssPlugins = []
}) => {
  const basePlugins = [autoprefixer({})];

  const postCssPlugs = [...basePlugins, ...postCssPlugins];

  const baseStyles = lazypipe()
    .pipe(sass, { importer: moduleImporter() })
    .pipe(postCss, postCssPlugs)
    .pipe(concat, name);

  const sourcemapStyles = lazypipe()
    .pipe(sourcemaps.init)
    .pipe(baseStyles)
    .pipe(sourcemaps.write, ".");

  return production ? baseStyles : sourcemapStyles;
};

export { html, minifyStyles, pug, purge, styles };
