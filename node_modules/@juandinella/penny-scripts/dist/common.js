'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var webpack = _interopDefault(require('webpack'));
var process$1 = require('process');
var path = require('path');
var webpackBundleAnalyzer = require('webpack-bundle-analyzer');
var UglifyJSPlugin = _interopDefault(require('uglifyjs-webpack-plugin'));
var fs = require('fs');

const makePath = filePath => path.join(process$1.cwd(), filePath);

// Opinionated life lol
const src = makePath('src');
const entry = makePath('src/assets/js/index.js');
const styles = makePath('src/assets/cssModules/css.json');
const output = makePath('dist/assets/js');

const userConfig = makePath('scripts.config.js');

const banner = `
▄█     █▄     ▄████████    ▄████████ ███▄▄▄▄    ▄█  ███▄▄▄▄      ▄██████▄
███     ███   ███    ███   ███    ███ ███▀▀▀██▄ ███  ███▀▀▀██▄   ███    ███
███     ███   ███    ███   ███    ███ ███   ███ ███▌ ███   ███   ███    █▀
███     ███   ███    ███  ▄███▄▄▄▄██▀ ███   ███ ███▌ ███   ███  ▄███
███     ███ ▀███████████ ▀▀███▀▀▀▀▀   ███   ███ ███▌ ███   ███ ▀▀███ ████▄
███     ███   ███    ███ ▀███████████ ███   ███ ███  ███   ███   ███    ███
███ ▄█▄ ███   ███    ███   ███    ███ ███   ███ ███  ███   ███   ███    ███
▀███▀███▀     ███    █▀    ███    ███  ▀█   █▀  █▀    ▀█   █▀    ████████▀
                            ███    ███

Don't edit this file directly. Edit with Webpack.
Then after you're done run npm run build

Scaffolded with @juandinella/penny-scripts
`;

const common = [
  // Do NOT import the BLOAT from moment.js
  new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
  // People please don't edit the dist file pl0xx
  new webpack.BannerPlugin(banner)
];

const debugPlugins = [
  new webpackBundleAnalyzer.BundleAnalyzerPlugin()
];

const developmentPlugins = [
];

const productionPlugins = [new UglifyJSPlugin({ sourceMap: true })];

const isProd = () => process.env.NODE_ENV === 'production';
const isDebug = () => process.env.DEBUG_MODE === 'true';

const checkDebug = () =>
  isProd() || isDebug();

const getPlugins = () => {
  const shouldBeDebugMode = checkDebug();

  let plugins = [ ...common ];

  if (!shouldBeDebugMode) plugins = [...plugins, ...developmentPlugins];
  if (shouldBeDebugMode) plugins = [...plugins, ...productionPlugins];
  if (isDebug()) plugins = [...plugins, ...debugPlugins];

  return plugins
};

const modules = {
  rules: [
    {
      test: /\.(js|jsx|mjs)$/,
      enforce: 'pre',
      use: [
        {
          options: {
            eslintPath: require.resolve('eslint'),
            baseConfig: {
              extends: [require.resolve('@juandinella/eslint-config')]
            },
            ignore: false,
            useEslintrc: false
          },
          loader: require.resolve('eslint-loader')
        }
      ],
      include: src
    },
    {
      oneOf: [
        // Parse OUR js
        {
          test: /\.(js|jsx|mjs)$/,
          include: src,
          exclude: [/[/\\\\]node_modules[/\\\\]/],
          use: {
            loader: 'babel-loader',
            options: {
              babelrc: false,
              presets: [require.resolve('@juandinella/babel-preset')],
              compact: true,
              highlightCode: true,
            }
          }
        },
        // Parse VENDOR js
        {
          test: /\.js$/,
          use: {
            loader: 'babel-loader',
            options: {
              babelrc: false,
              compact: false,
              presets: [require.resolve('@juandinella/babel-preset/dependencies')],
              cacheDirectory: true,
              highlightCode: true,
            }
          }
        }
      ]
    }
  ]
};

const getConfig = () => {
  const shouldBeDebugMode = checkDebug();

  const config = {
    entry: {
      main: entry
    },
    output: {
      filename: '[name].js',
      chunkFilename: '[name].chunk.js',
      path: output,
      publicPath: '/'
    },
    // Check corresponding file for more info xoxoxo
    module: modules,
    plugins: getPlugins(),
    devtool: shouldBeDebugMode
      ? 'hidden-source-map'
      : 'cheap-module-sourcemap',
    // Some libraries import Node modules but don't use them in the browser.
    // Tell Webpack to provide empty mocks for them so importing them works.
    node: {
      dgram: 'empty',
      fs: 'empty',
      net: 'empty',
      tls: 'empty',
      child_process: 'empty'
    },
    resolve: {
      alias: {
        styles: styles
      }
    },
    bail: shouldBeDebugMode,
    mode: shouldBeDebugMode ? 'production' : 'development',
    performance: {
      hints: shouldBeDebugMode ? 'warning' : false
    },
  };

  return config
};

const setEnv = mode => {
  process.env.NODE_ENV = mode;
  process.env.BABEL_ENV = mode;
};

const setDebug = mode => {
  process.env.DEBUG_MODE = mode;
};

const compileJS = mode => {
  const isDebug = mode === 'debug';
  setDebug(isDebug);

  if (mode === 'production' || isDebug) {
    setEnv('production');
  } else {
    setEnv('development');
  }

  const defaultConfig = getConfig();

  const customConfig = fs.existsSync(userConfig);

  const config = customConfig
    // Let's do it the Next.js way
    ? require(userConfig)(defaultConfig, webpack)
    : defaultConfig;
  return new Promise(resolve =>
    webpack(config, (err, stats) => {
      if (err) console.log('Webpack', err);
      console.log(stats.toString({
        chunks: false,
        colors: true
      }));
      resolve();
    })
  )
};

exports.compiler = compileJS;
